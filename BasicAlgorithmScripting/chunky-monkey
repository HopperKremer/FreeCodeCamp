/*
chunkArrayInGroups(["a", "b", "c", "d"], 2) should return [["a", "b"], ["c", "d"]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3) should return [[0, 1, 2], [3, 4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2) should return [[0, 1], [2, 3], [4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4) should return [[0, 1, 2, 3], [4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3) should return [[0, 1, 2], [3, 4, 5], [6]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4) should return [[0, 1, 2, 3], [4, 5, 6, 7], [8]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2) should return [[0, 1], [2, 3], [4, 5], [6, 7], [8]].
*/


function chunkArrayInGroups(arr, size) {
  // Break it up.
  var arr2d = [];
  
  for (var i = 0; i < (arr.length/size); i ++) {
    if (i === 0){
      arr2d.push(arr.slice(0, size));
    } else if (i > 0) {
      console.log(arr[1], "running", i, size);
    arr2d.push(arr.slice(i*size, size));
    }
  }
  console.log(arr2d);
  arr2d.push(arr.slice(i*size, size));

  return arr2d;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);
